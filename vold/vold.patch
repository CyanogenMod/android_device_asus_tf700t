diff -uNr a/Android.mk b/Android.mk
--- a/Android.mk	2012-11-11 12:04:15.000000000 -0800
+++ b/Android.mk	2012-11-11 11:51:26.000000000 -0800
@@ -14,6 +14,7 @@
        Ext4.cpp \
        Fat.cpp \
        Ntfs.cpp \
+       exFat.cpp \
        Loop.cpp \
        Devmapper.cpp \
        ResponseCode.cpp \
diff -uNr a/DirectVolume.cpp b/DirectVolume.cpp
--- a/DirectVolume.cpp	2012-11-11 12:04:15.000000000 -0800
+++ b/DirectVolume.cpp	2012-11-11 11:58:56.000000000 -0800
@@ -18,6 +18,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
+#include <sys/stat.h>

 #include <linux/kdev_t.h>

@@ -125,6 +126,7 @@ int DirectVolume::handleBlockEvent(NetlinkEvent *evt) {
                 if (getState() == Volume::State_Idle) {
                     char msg[255];

+                    mkdir(getMountpoint(), 777);
                     snprintf(msg, sizeof(msg),
                              "Volume %s %s disk inserted (%d:%d)", getLabel(),
                              getMountpoint(), mDiskMajor, mDiskMinor);
@@ -307,6 +309,7 @@ void DirectVolume::handleDiskRemoved(const char *devpath, NetlinkEvent *evt) {
     mVm->getBroadcaster()->sendBroadcast(ResponseCode::VolumeDiskRemoved,
                                              msg, false);
     setState(Volume::State_NoMedia);
+    rmdir(getMountpoint());
 }

 void DirectVolume::handlePartitionRemoved(const char *devpath, NetlinkEvent *evt) {
diff -uNr a/exFat.cpp b/exFat.cpp
--- a/exFat.cpp	1969-12-31 16:00:00.000000000 -0800
+++ b/exFat.cpp	2012-11-11 11:51:26.000000000 -0800
@@ -0,0 +1,100 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdio.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+
+#include <linux/kdev_t.h>
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+#include <cutils/properties.h>
+
+#include "exFat.h"
+
+extern "C" int logwrap(int argc, const char **argv, int background);
+extern "C" int mount(const char *, const char *, const char *, unsigned long, const void *);
+
+int exFat::check(const char *fsPath) {
+
+    return 0;
+
+}
+
+int exFat::doMount(const char *fsPath, const char *mountPoint,
+                 bool ro, bool remount, bool executable,
+                 int ownerUid, int ownerGid, int permMask, bool createLost) {
+    int rc;
+    unsigned long flags;
+    char mountData[255];
+
+    flags = MS_NODEV | MS_NOSUID | MS_DIRSYNC;
+
+    flags |= (executable ? 0 : MS_NOEXEC);
+    flags |= (ro ? MS_RDONLY : 0);
+    flags |= (remount ? MS_REMOUNT : 0);
+
+    // Testing/security, mount ro up to now
+    flags |= MS_RDONLY;
+
+    /*
+     * Note: This is a temporary hack. If the sampling profiler is enabled,
+     * we make the SD card world-writable so any process can write snapshots.
+     *
+     * TODO: Remove this code once we have a drop box in system_server.
+     */
+    char value[PROPERTY_VALUE_MAX];
+    property_get("persist.sampling_profiler", value, "");
+    if (value[0] == '1') {
+        SLOGW("The SD card is world-writable because the"
+            " 'persist.sampling_profiler' system property is set to '1'.");
+        permMask = 0;
+    }
+
+    sprintf(mountData,
+            "uid=%d,gid=%d,fmask=%o,dmask=%o",
+            ownerUid, ownerGid, permMask, permMask);
+
+    rc = mount(fsPath, mountPoint, "texfat", flags, mountData);
+
+    if (rc && errno == EROFS) {
+        SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
+        flags |= MS_RDONLY;
+        rc = mount(fsPath, mountPoint, "texfat", flags, mountData);
+    }
+
+    return rc;
+}
+
+int exFat::format(const char *fsPath, unsigned int numSectors) {
+
+    errno = EIO;
+    return -1;
+
+}
diff -uNr a/exFat.h b/exFat.h
--- a/exFat.h	1969-12-31 16:00:00.000000000 -0800
+++ b/exFat.h	2012-11-11 11:51:26.000000000 -0800
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _EXFAT_H
+#define _EXFAT_H
+
+#include <unistd.h>
+
+class exFat {
+public:
+    static int check(const char *fsPath);
+    static int doMount(const char *fsPath, const char *mountPoint,
+                       bool ro, bool remount, bool executable,
+                       int ownerUid, int ownerGid, int permMask,
+                       bool createLost);
+    static int format(const char *fsPath, unsigned int numSectors);
+};
+
+#endif
diff -uNr a/Ntfs.cpp b/Ntfs.cpp
--- a/Ntfs.cpp	2012-11-11 12:04:15.000000000 -0800
+++ b/Ntfs.cpp	2012-11-11 12:00:08.000000000 -0800
@@ -83,12 +83,12 @@
             "uid=%d,gid=%d,fmask=%o,dmask=%o",
             ownerUid, ownerGid, permMask, permMask);

-    rc = mount(fsPath, mountPoint, "ntfs", flags, mountData);
+    rc = mount(fsPath, mountPoint, "tntfs", flags, mountData);

     if (rc && errno == EROFS) {
         SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
         flags |= MS_RDONLY;
-        rc = mount(fsPath, mountPoint, "ntfs", flags, mountData);
+        rc = mount(fsPath, mountPoint, "tntfs", flags, mountData);
     }

     return rc;
diff -uNr a/Volume.cpp b/Volume.cpp
--- a/Volume.cpp	2012-11-11 12:04:15.000000000 -0800
+++ b/Volume.cpp	2012-11-11 11:56:51.000000000 -0800
@@ -45,6 +45,7 @@
 #include "ResponseCode.h"
 #include "Fat.h"
 #include "Ntfs.h"
+#include "exFat.h"
 #include "Process.h"
 #include "cryptfs.h"

@@ -441,20 +442,6 @@
         errno = 0;
         setState(Volume::State_Checking);

-        bool isFatFs = true;
-        if (Fat::check(devicePath)) {
-            if (errno == ENODATA) {
-                SLOGW("%s does not contain a FAT filesystem\n", devicePath);
-                isFatFs = false;
-            } else {
-                errno = EIO;
-                /* Badness - abort the mount */
-                SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
-                setState(Volume::State_Idle);
-                return -1;
-            }
-        }
-
         /*
          * Mount the device on our internal staging mountpoint so we can
          * muck with it before exposing it to non priviledged users.
@@ -466,20 +453,42 @@
         // prevented users from writing to it. We don't want that.
         gid = AID_SDCARD_RW;

-        if (isFatFs) {
-            if (Fat::doMount(devicePath, "/mnt/secure/staging", false, false, false,
-                    AID_SYSTEM, gid, 0702, true)) {
-                SLOGE("%s failed to mount via VFAT (%s)\n", devicePath, strerror(errno));
-                continue;
-            }
-        } else {
-            if (Ntfs::doMount(devicePath, "/mnt/secure/staging", false, false, false,
-                    AID_SYSTEM, gid, 0702, true)) {
-                SLOGE("%s failed to mount via NTFS (%s)\n", devicePath, strerror(errno));
+        if (!Ntfs::doMount(devicePath, "/mnt/secure/staging", false, false, false,
+                          AID_SYSTEM, gid, 0702, true)) {
+            SLOGI("mounted NTFS volume");
+            goto vol_mounted;
+        }
+
+        if (!exFat::doMount(devicePath, "/mnt/secure/staging", false, false, false,
+                          AID_SYSTEM, gid, 0702, true)) {
+            SLOGI("mounted exFat volume");
+            goto vol_mounted;
+        }
+
+        if (Fat::check(devicePath)) {
+            if (errno == ENODATA) {
+                SLOGW("%s does not contain a FAT filesystem\n", devicePath);
                 continue;
+            } else {
+                errno = EIO;
+                /* Badness - abort the mount */
+                SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
+                setState(Volume::State_Idle);
+                return -1;
             }
         }

+		if (!Fat::doMount(devicePath, "/mnt/secure/staging", false, false, false,
+						AID_SYSTEM, gid, 0702, true)) {
+			SLOGI("mounted Fat volume");
+			goto vol_mounted;
+		}
+
+        /* all mount attempts failed loop */
+        continue;
+
+vol_mounted:
+
         SLOGI("Device %s, target %s mounted @ /mnt/secure/staging", devicePath, getMountpoint());

         protectFromAutorunStupidity();
